# exampleNet_run.py
# Automatically generated by Netflux on 26-Oct-2022
# 10/26 edits made by JS, need to incorporate into exportPythonODE.m

import numpy as np
import scipy.integrate
import matplotlib.pyplot as plt
import insulinNet
import insulinParams


def base_sim(speciesNames, tau, ymax, y0, w, n, EC50):
    # Run multistep simulation
    tspan = [0, 10]
    w[0] = 1
    sol1 = scipy.integrate.solve_ivp(insulinNet.ODEfunc, tspan, y0, args=(tau, ymax, w, n, EC50,))
    w[0] = 0
    sol2 = scipy.integrate.solve_ivp(insulinNet.ODEfunc, tspan, sol1.y[:, -1], args=(tau, ymax, w, n, EC50,))
    sol3 = scipy.integrate.solve_ivp(insulinNet.ODEfunc, tspan, sol2.y[:, -1], args=(tau, ymax, w, n, EC50,))
    w[0] = 1
    sol4 = scipy.integrate.solve_ivp(insulinNet.ODEfunc, tspan, sol3.y[:, -1], args=(tau, ymax, w, n, EC50,))

    return sol1, sol2, sol3, sol4

def individual_sens():
    # WEIGHT IR
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    w[1] *= 0.55  # point 1
    # w[8] *= 0.5  # point 2
    # w[3] *= 0.15  # point 3
    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors

    # WEIGHT GLUT4
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    # w[1] *= 0.55  # point 1
    w[8] *= 0.5  # point 2
    # w[3] *= 0.15  # point 3
    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors

    # mTORC1
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    # w[1] *= 0.55  # point 1
    # w[8] *= 0.5  # point 2
    w[3] *= 0.15  # point 3
    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors

    # YMAX IR
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    ymax[1] *= 0.55  # point 1
    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors

    # YMAX GLUT4
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    ymax[5] *= 0.55  # point 2
    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors


def plot_single_combo(combo):
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()
    if combo[0] == 'w':
        w[1] *= 0.55  # point 1
    elif combo[0] == 'y':
        ymax[1] *= 0.55

    if combo[1] == 'w':
        w[8] *= 0.5  # point 2
    elif combo[2] == 'y':
        ymax[5] *= 0.5

    if combo[2] == 't':
        w[3] *= 0.15  # point 3

    sol1d, sol2d, sol3d, sol4d = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    yd = np.hstack((sol1d.y, sol2d.y, sol3d.y, sol4d.y))
    td = np.hstack((sol1d.t, sol2d.t + 10, sol3d.t + 20, sol4d.t + 30))
    plt.plot(td, yd[6].T)  # current 'ax' is getting other lines, so it causes later errors

if __name__ == '__main__':
    [speciesNames, tau, ymax, y0, w, n, EC50] = insulinParams.loadParams()

    sol1, sol2, sol3, sol4 = base_sim(speciesNames, tau, ymax, y0, w, n, EC50)

    t = np.hstack((sol1.t, sol2.t + 10, sol3.t + 20, sol4.t + 30))
    y = np.hstack((sol1.y, sol2.y, sol3.y, sol4.y))

    plt.figure()
    # NORMAL
    t = np.hstack((sol1.t, sol2.t + 10, sol3.t + 20, sol4.t + 30))
    y = np.hstack((sol1.y, sol2.y, sol3.y, sol4.y))
    plt.plot(t, y[6].T)  # current 'ax' is getting other lines, so it causes later errors

    individual_sens()

    plt.xlabel('Time')
    plt.ylabel('Glucose uptake')
    plt.legend(["Normal", "weight-IR", "weight-GLUT4", "mTORC1", "ymax-IR", "ymax-GLUT4"])
    plt.title('Individual effect of reaction parameter inhibition')
    plt.show()

    # hi mo
    plt.figure()

    # NORMAL
    t = np.hstack((sol1.t, sol2.t + 10, sol3.t + 20, sol4.t + 30))
    y = np.hstack((sol1.y, sol2.y, sol3.y, sol4.y))
    plt.plot(t, y[6].T)  # current 'ax' is getting other lines, so it causes later errors

    combos = ['wwt', 'wyt', 'ywt', 'yyt', 'wxt', 'yxt', 'wwx', 'wyx', 'ywx', 'yyx', 'xwt', 'xyt']
    for c in combos:
        plot_single_combo(c)

    plt.xlabel('Time')
    plt.ylabel('Glucose uptake')
    plt.legend(["Normal"] + combos)
    plt.title('Parameter inhibition synergies')
    plt.show()
